
==================== FINAL INTERFACE ====================
2017-12-21 13:01:22.9087262 UTC

interface calc-0.1.0.0-9Oq6hdcIFCX6Vb7F86N9Ql:Lib 8002
  interface hash: 20492547f387de11887533b290093f2c
  ABI hash: 28b24dd5cade4d0a85a5ce37e01c73cb
  export-list hash: b2ead50010e3e61a63c689ba21bfd3fa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b847b675a91348479da0c1f8d4b9ba
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.someFunc
module dependencies: Arithmetic
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad.IO.Class 3f1875e753ac8c44dae64dc062ea742e
import  -/  base-4.9.1.0:Data.Functor.Identity 32cee9a7261d59bbe8937d63a0b06c52
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  Arithmetic 41a2455ae465b42bc95557397432b329
  exports: d390c5003ad514b1d0230238d5387600
  Exit 0ae064bf3d77ddc182343c62fab7dc5a
  evaluate d6b97d5b654fea8a170c5be7c83fabe1
  interpret 19cacbbbca37d5d0cc15242958dc197a
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 5e60b761569ee353529e98a36b72df11
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 953c05e2bceca1b256a90a052f7c1b62
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe 34d1522a74b7aa48c00f00444cf8a285
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader ea13c8a815ea11d13acee6e9122cc7d2
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State 8d226555bc2686d0ea757e495e63698c
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 84a45cc87ff746fa139507726db5c941
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Writer f2e93e473b41a2c9d937cc9be25c2efe
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Writer.Lazy 5ece6aa3898f96f02e0ef74ca5ac71d4
40460aa581d7a47e2ba48aa0f061e633
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
7698fd4153d9c44fd29645b6e910faa0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
997769b165c7b47847eae988833e0e6c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "calc-0.1.0.0-9Oq6hdcIFCX6Vb7F86N9Ql"#) -}
653799cbd3b4ec617c2f0ee4d270e6d4
  type CalcState = GHC.Types.Double
31fdbbf01c874257172f95ae4b97ced2
  type Input = GHC.Integer.Type.Integer
56b324d886c994402b4ed64d1f6a77f9
  type MyStack =
    Control.Monad.Trans.Writer.Lazy.WriterT
      Lib.Output
      (Control.Monad.Trans.State.Lazy.StateT
         Lib.CalcState Lib.UncertainIO)
    :: * -> *
691b65d190ef01fbfeaf37f43c8d5b4a
  type Output = [GHC.Base.String]
dc2fe069f830454d48091b722fbccb71
  type UncertainIO =
    Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO :: * -> *
617c78dead6cbb12256341f615245988
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
05746803a259042cc329511025628e73
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.someFunc5
                        GHC.Types.True
                        s of ds { (#,#) ipv ipv1 ->
                 case Lib.someFunc4 Lib.someFunc3 ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { DEFAULT ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   ipv2 } } }) -}
6d159dd8600e4a8a0fdcb01827d3c90f
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Calculator shutting down"#) -}
4c1fb20b32a0c5bdff543c3d6827e653
  someFunc3 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
ffb11b92bb62eddfa9cd7447a2df4ccd
  someFunc4 ::
    GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (((), [GHC.Base.String]), GHC.Types.Double) #)
  {- Arity: 2, Strictness: <L,U(U)><S,U> -}
b4fd8b3bcc8c0843611ae33425c0b603
  someFunc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "=>Welcome to my monad stack calculator.\n\
                   \=>It only handles one equation at a time but has a temporary memory.\n\
                   \=>Enjoy."#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

